- id: 5c5b0392-1daa-45e1-967c-2f361ce78849
  name: Compress Staged Directory (Password Protected) and Split Into Smaller Chunks
  description: |
    This ability will compress the staged files into a password protected archive and break it
    into smaller chunks based on the given byte size. The original archive will be automatically
    deleted. Use this instead of other archiving abilities if small file sizes for exfiltration 
    are desired. When used with an exfiltration ability, the exfiltration ability will run numerous
    times in an operation depending on how many chunks are created. 
  tactic: exfiltration
  technique:
    attack_id: T1030
    name: Data Transfer Size Limits
  platforms:
    linux:
      sh:
        command: |
          tar -C #{file.staged_at} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{custom.archive_password}' > #{file.staged_at}.tar.gz.gpg;
          split -b#{custom.file_size_chunk} '#{file.staged_at}.tar.gz.gpg' '#{file.staged_at}'/calderachunk;
          rm '#{file.staged_at}.tar.gz.gpg';
          find '#{file.staged_at}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;
        cleanup: |
          find '#{file.staged_at}' -maxdepth 1 -name 'calderachunk*' -exec rm -rf {} \;
        parsers:
          plugins.stockpile.app.parsers.basic:
            - source: file.staged_at
              edge: is_compressed
    windows:
      psh:
        command: |
          & "C:\Program Files\7-Zip\7z.exe" a "#{file.staged_at}.7z" "#{file.staged_at}\*" '-p#{custom.archive_password}' | Out-Null;
          sleep 2;
          $Archive = Get-Item -Path "#{file.staged_at}.7z";
          $StageDir = "#{file.staged_at}";
          $BaseName = $StageDir + "\calderachunk";
          $UpperBound = [int32]"#{custom.file_size_chunk}";
          $Content = [IO.File]::OpenRead($Archive);
          $buff = New-Object byte[] $UpperBound;
          $Bytes = $idx = 0;
          try {
              do {
                  $Bytes = $Content.Read($buff, 0, $buff.Length);
                  if ($Bytes -gt 0) {
                      $ChunkName = "{0}{1}" -f ($BaseName, $idx.ToString().PadLeft(3,'0'));
                      $ChunkFile = [IO.File]::OpenWrite($ChunkName);
                      try {
                          $ChunkFile.Write($buff, 0, $Bytes);
                      } finally {
                          $ChunkFile.Close();
                      }
                  }
                  $idx ++;
              } while ($Bytes -gt 0)
          }
          finally {
              $Content.Close();
          }
          Remove-Item $Archive;
          Get-ChildItem -Path "$StageDir\calderachunk*" | foreach {$_.FullName} | Select-Object;
        cleanup: |
          Get-ChildItem -Path "$StageDir\calderachunk*" | Remove-Item;
        parsers:
          plugins.stockpile.app.parsers.basic:
            - source: file.staged_at
              edge: is_compressed
  requirements:
  - plugins.stockpile.app.requirements.paw_provenance:
    - source: file.staged_at
  - plugins.stockpile.app.requirements.basic:
      - source: file.staged_at
        edge: is_compressed